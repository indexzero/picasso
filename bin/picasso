#!/usr/bin/env node

var fs = require('fs'),
    async = require('async'),
    f = require('frameless'),
    request = require('request');

f.sensitive_options.push('password');
f.dotfile_path('picasso');

f({ name: 'username',   required: true },
  { name: 'password',   required: true },
  { name: 'repo',       required: true },
  { name: 'label-file', required: true },
  function (opts) {
    var repo = opts.repo;
        
    //
    // Helper function for talking to Github
    //
    function githubLabels(req, next) {
      if (!next && typeof req === 'function') {
        next = req;
        req = { method: 'GET' };
      }

      request({
        method: req.method,
        json:   true,
        body:   req.body
          ? JSON.stringify(req.body)
          : null,
        uri:    [
          'https://' + [opts.username, opts.password].join(':') + '@api.github.com',
          'repos',
          repo,
          'labels',
          req.label
        ]
        .filter(Boolean)
        .join('/')
      }, function (err, res, body) {
        return err ? next(err) : next(null, body);
      });
    }
    
    async.waterfall([
      //
      // 1. Read the label-file
      //
      async.apply(fs.readFile, opts['label-file'], 'utf8'),
      //
      // 2. List all Labels on the repo
      //
      function listLabels(target, next) {
        f.info('Listing labels for ' + repo);
        githubLabels(function (err, current) {
          return !err
            ? next(null, JSON.parse(target), current)
            : next(err);
        });
      },
      //
      // 3. Sync labels with the repo:
      //   * If it does not exist, create it.
      //   * If it exists update it.
      //
      function syncLabels(target, existing, done) {
        var names = existing.map(function (label) {
          return label.name;
        });
        
        //
        // Target will be in format
        // {
        //   "label": "color"
        // }
        //
        async.forEachSeries(
          Object.keys(target),
          function syncOne(name, next) {
            var send = {
              method: 'POST',
              body: {
                name:  name,
                color: target[name]
              }
            };

            //
            // If the `name` isnt in the set of existing
            // `names` then create it. Otherwise update it. 
            //
            if (names.indexOf(name) !== -1) {
              f.info('Updating ' + name + ' in ' + repo);
              send.method = 'PATCH';
              send.label  = name; 
            }
            else {
              f.info('Creating ' + name + ' in ' + repo);
            }

            githubLabels(send, next);
          },
          done
        );
      }
    ], function (err) {
      if (err) {
        f.warn('Error syncing labels with ' + repo);
        return f.print(err);
      }
      
      f.info('Done syncing labels with ' + repo);
    });
  }
);